diff --git a/internal/core/cmake/Utils.cmake b/internal/core/cmake/Utils.cmake
index 8facf7cccd..f0d75bf8be 100644
--- a/internal/core/cmake/Utils.cmake
+++ b/internal/core/cmake/Utils.cmake
@@ -101,12 +101,32 @@ macro(create_library)
     target_compile_definitions(${L_TARGET} PRIVATE ${L_DEFS})
 endmacro()
 
+macro(add_source_at_current_directory)
+    file(GLOB SOURCE_FILES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "*.cc" "*.cpp" "*.c" "*.cxx")
+    message(STATUS "${CMAKE_CURRENT_SOURCE_DIR}  add new source files at current directory: ${SOURCE_FILES}")
+endmacro()
+
+macro(add_source_at_current_directory_with_exclude)
+    file(GLOB SOURCE_FILES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "*.cc" "*.cpp" "*.c" "*.cxx")
+    # Exclude files matching patterns
+    list(FILTER SOURCE_FILES EXCLUDE REGEX ".*_test\\.cc$")
+    list(FILTER SOURCE_FILES EXCLUDE REGEX ".*_test\\.cpp$")
+    list(FILTER SOURCE_FILES EXCLUDE REGEX ".*_mock\\.cc$")
+    list(FILTER SOURCE_FILES EXCLUDE REGEX ".*_mock\\.cpp$")
+    message(STATUS "${CMAKE_CURRENT_SOURCE_DIR}  add new source files at current directory: ${SOURCE_FILES}")
+endmacro()
+
 macro(add_source_at_current_directory_recursively)
     file(GLOB_RECURSE SOURCE_FILES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "*.cc" "*.cpp" "*.c" "*.cxx")
     message(STATUS "${CMAKE_CURRENT_SOURCE_DIR}  add new source files at current directory recursively: ${SOURCE_FILES}")
 endmacro()
 
-macro(add_source_at_current_directory)
-    file(GLOB SOURCE_FILES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "*.cc" "*.cpp" "*.c" "*.cxx")
-    message(STATUS "${CMAKE_CURRENT_SOURCE_DIR}  add new source files at current directory: ${SOURCE_FILES}")
+macro(add_source_at_current_directory_recursively_with_exclude)
+    file(GLOB_RECURSE SOURCE_FILES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "*.cc" "*.cpp" "*.c" "*.cxx")
+    # Exclude files matching patterns
+    list(FILTER SOURCE_FILES EXCLUDE REGEX ".*_test\\.cc$")
+    list(FILTER SOURCE_FILES EXCLUDE REGEX ".*_test\\.cpp$")
+    list(FILTER SOURCE_FILES EXCLUDE REGEX ".*_mock\\.cc$")
+    list(FILTER SOURCE_FILES EXCLUDE REGEX ".*_mock\\.cpp$")
+    message(STATUS "${CMAKE_CURRENT_SOURCE_DIR}  add new source files at current directory recursively: ${SOURCE_FILES}")
 endmacro()
diff --git a/internal/core/src/common/Tracer.cpp b/internal/core/src/common/Tracer.cpp
index c60f8ad3cb..c2ea1316d6 100644
--- a/internal/core/src/common/Tracer.cpp
+++ b/internal/core/src/common/Tracer.cpp
@@ -10,8 +10,11 @@
 // or implied. See the License for the specific language governing permissions and limitations under the License
 
 #include "Tracer.h"
+#ifndef MILVUS_LITE
 #include <opentelemetry/exporters/otlp/otlp_http_exporter_factory.h>
 #include <opentelemetry/exporters/otlp/otlp_http_exporter_options.h>
+#endif
+
 #include "log/Log.h"
 
 #include <atomic>
@@ -20,6 +23,7 @@
 #include <iostream>
 #include <utility>
 
+#ifndef MILVUS_LITE
 #include "opentelemetry/exporters/jaeger/jaeger_exporter_factory.h"
 #include "opentelemetry/exporters/ostream/span_exporter_factory.h"
 #include "opentelemetry/exporters/otlp/otlp_grpc_exporter_factory.h"
@@ -34,7 +38,6 @@
 #include "opentelemetry/trace/span_metadata.h"
 
 namespace milvus::tracer {
-
 namespace trace = opentelemetry::trace;
 namespace nostd = opentelemetry::nostd;
 
@@ -276,5 +279,126 @@ AutoSpan::~AutoSpan() {
         CloseRootSpan();
     }
 }
+#endif
+
+#ifdef MILVUS_LITE
+namespace milvus::tracer {
+static std::atomic<bool> enable_trace = true;
+void
+initTelemetry(const TraceConfig& cfg) {
+}
+
+std::string
+GetTraceID() {
+    return std::string();
+}
+
+std::string
+GetTraceIDAsHexStr(const TraceContext* ctx) {
+    return std::string();
+}
+
+std::shared_ptr<trace::Tracer>
+GetTracer() {
+    return std::make_shared<trace::Tracer>();
+}
+
+std::shared_ptr<trace::Span>
+StartSpan(const std::string& name, TraceContext* parentCtx) {
+    return std::make_shared<trace::Span>();
+}
+
+std::shared_ptr<trace::Span>
+StartSpan(const std::string& name, const std::shared_ptr<trace::Span>& span) {
+    return std::make_shared<trace::Span>();
+}
+
+thread_local std::shared_ptr<trace::Span> local_span;
+void
+SetRootSpan(std::shared_ptr<trace::Span> span) {
+}
+
+void
+CloseRootSpan() {
+}
+
+std::shared_ptr<trace::Span>
+GetRootSpan() {
+    if (enable_trace) {
+        return local_span;
+    }
+    return nullptr;
+}
+
+std::string
+GetSpanIDAsHexStr(const TraceContext* ctx) {
+    return std::string();
+}
+
+void
+AddEvent(const std::string& event_label) {
+}
+
+bool
+isEmptyID(const uint8_t* id, int length) {
+    if (id != nullptr) {
+        for (int i = 0; i < length; i++) {
+            if (id[i] != 0) {
+                return false;
+            }
+        }
+    }
+    return true;
+}
+
+bool
+EmptyTraceID(const TraceContext* ctx) {
+    return true;
+}
+
+bool
+EmptySpanID(const TraceContext* ctx) {
+    return true;
+}
+
+std::vector<uint8_t>
+GetTraceIDAsVector(const TraceContext* ctx) {
+    return {};
+}
+
+std::vector<uint8_t>
+GetSpanIDAsVector(const TraceContext* ctx) {
+    return {};
+}
+
+AutoSpan::AutoSpan(const std::string& name,
+                   TraceContext* ctx,
+                   bool is_root_span)
+    : is_root_span_(is_root_span) {
+    span_ = StartSpan(name, ctx);
+    if (is_root_span) {
+        SetRootSpan(span_);
+    }
+}
+
+AutoSpan::AutoSpan(const std::string& name,
+                   const std::shared_ptr<trace::Span>& span)
+    : is_root_span_(false) {
+    span_ = StartSpan(name, span);
+}
 
+std::shared_ptr<trace::Span>
+AutoSpan::GetSpan() {
+    return span_;
+}
+
+AutoSpan::~AutoSpan() {
+    if (span_ != nullptr) {
+        span_->End();
+    }
+    if (is_root_span_) {
+        CloseRootSpan();
+    }
+}
 }  // namespace milvus::tracer
+#endif
\ No newline at end of file
diff --git a/internal/core/src/common/Tracer.h b/internal/core/src/common/Tracer.h
index fce14d393b..6ee06daa2b 100644
--- a/internal/core/src/common/Tracer.h
+++ b/internal/core/src/common/Tracer.h
@@ -14,10 +14,32 @@
 #include <memory>
 #include <string>
 
+#ifndef MILVUS_LITE
 #include "opentelemetry/trace/provider.h"
+#endif
 
 #define TRACE_SERVICE_SEGCORE "segcore"
 
+namespace trace {
+
+#ifdef MILVUS_LITE
+class Span {
+ public:
+    void
+    End() {
+    }
+};
+class Tracer {
+ public:
+    static int
+    WithActiveSpan(std::shared_ptr<Span>& span) noexcept {
+        return 0;
+    }
+};
+
+};  // namespace trace
+#endif
+
 namespace milvus::tracer {
 
 struct TraceConfig {
@@ -36,7 +58,10 @@ struct TraceContext {
     const uint8_t* spanID = nullptr;
     uint8_t traceFlags = 0;
 };
+
+#ifndef MILVUS_LITE
 namespace trace = opentelemetry::trace;
+#endif
 
 void
 initTelemetry(const TraceConfig& cfg);
diff --git a/internal/core/src/index/JsonInvertedIndex.cpp b/internal/core/src/index/JsonInvertedIndex.cpp
index 569819b443..d15dcb7d5c 100644
--- a/internal/core/src/index/JsonInvertedIndex.cpp
+++ b/internal/core/src/index/JsonInvertedIndex.cpp
@@ -137,7 +137,7 @@ JsonInvertedIndex<T>::build_index_for_json(
                 } else {
                     auto array_values = array_res.value();
                     for (auto value : array_values) {
-                        auto val = value.get<SIMDJSON_T>();
+                        auto val = value.template get<SIMDJSON_T>();
 
                         if (val.error() == simdjson::SUCCESS) {
                             values.push_back(static_cast<T>(val.value()));
diff --git a/internal/core/src/storage/CMakeLists.txt b/internal/core/src/storage/CMakeLists.txt
index b88211bb87..a158becd37 100644
--- a/internal/core/src/storage/CMakeLists.txt
+++ b/internal/core/src/storage/CMakeLists.txt
@@ -16,6 +16,14 @@
 
 add_source_at_current_directory()
 
+# Exclude specific files
+list(FILTER SOURCE_FILES EXCLUDE REGEX "^Aliyun.*\\.cpp$")
+list(FILTER SOURCE_FILES EXCLUDE REGEX "^Minio.*\\.cpp$")
+list(FILTER SOURCE_FILES EXCLUDE REGEX "^ChunkManager.cpp$")
+list(FILTER SOURCE_FILES EXCLUDE REGEX "^TencentCloud.*\\.cpp$")
+
+message("SOURCE_FILES: ${SOURCE_FILES}")
+
 if (ENABLE_GCP_NATIVE)
     add_definitions(-DENABLE_GCP_NATIVE)
     add_subdirectory(gcp-native-storage)
diff --git a/internal/core/src/storage/ChunkManager.cpp b/internal/core/src/storage/ChunkManager.cpp
index c6d8908625..c60bc74c6b 100644
--- a/internal/core/src/storage/ChunkManager.cpp
+++ b/internal/core/src/storage/ChunkManager.cpp
@@ -15,6 +15,7 @@
 // limitations under the License.
 
 #include <fstream>
+#ifndef MILVUS_LITE
 #include <aws/core/auth/AWSCredentials.h>
 #include <aws/core/auth/AWSCredentialsProviderChain.h>
 #include <aws/core/auth/STSCredentialsProvider.h>
@@ -28,11 +29,13 @@
 #include <aws/s3/model/ListObjectsRequest.h>
 #include <aws/s3/model/PutObjectRequest.h>
 
+
 #include "storage/MinioChunkManager.h"
 #include "storage/AliyunSTSClient.h"
 #include "storage/TencentCloudSTSClient.h"
 #include "storage/AliyunCredentialsProvider.h"
 #include "storage/TencentCloudCredentialsProvider.h"
+#endif
 #include "common/Consts.h"
 #include "common/EasyAssert.h"
 #include "log/Log.h"
diff --git a/internal/core/src/storage/LocalChunkManager.cpp b/internal/core/src/storage/LocalChunkManager.cpp
index be97ee000b..57e4c77dcb 100644
--- a/internal/core/src/storage/LocalChunkManager.cpp
+++ b/internal/core/src/storage/LocalChunkManager.cpp
@@ -23,6 +23,7 @@
 #include <boost/system/error_code.hpp>
 #include <fstream>
 #include <sstream>
+#include <thread>
 
 #include "common/EasyAssert.h"
 #include "common/Exception.h"
diff --git a/internal/core/src/storage/Util.cpp b/internal/core/src/storage/Util.cpp
index 85ec72152c..f0dbee476c 100644
--- a/internal/core/src/storage/Util.cpp
+++ b/internal/core/src/storage/Util.cpp
@@ -37,7 +37,9 @@
 #include "storage/InsertData.h"
 #include "storage/LocalChunkManager.h"
 #include "storage/MemFileManagerImpl.h"
+#ifndef MILVUS_LITE
 #include "storage/MinioChunkManager.h"
+#endif
 #ifdef USE_OPENDAL
 #include "storage/opendal/OpenDALChunkManager.h"
 #endif
@@ -750,6 +752,7 @@ CreateChunkManager(const StorageConfig& storage_config) {
             return std::make_shared<LocalChunkManager>(
                 storage_config.root_path);
         }
+#ifndef MILVUS_LITE
         case ChunkManagerType::Minio: {
             return std::make_shared<MinioChunkManager>(storage_config);
         }
@@ -770,22 +773,19 @@ CreateChunkManager(const StorageConfig& storage_config) {
                     return std::make_shared<TencentCloudChunkManager>(
                         storage_config);
                 }
-#ifdef AZURE_BUILD_DIR
                 case CloudProviderType::AZURE: {
                     return std::make_shared<AzureChunkManager>(storage_config);
                 }
-#endif
-#ifdef ENABLE_GCP_NATIVE
                 case CloudProviderType::GCPNATIVE: {
                     return std::make_shared<GcpNativeChunkManager>(
                         storage_config);
                 }
-#endif
                 default: {
                     return std::make_shared<MinioChunkManager>(storage_config);
                 }
             }
         }
+#endif
 #ifdef USE_OPENDAL
         case ChunkManagerType::OpenDAL: {
             return std::make_shared<OpenDALChunkManager>(storage_config);
diff --git a/internal/core/thirdparty/knowhere/CMakeLists.txt b/internal/core/thirdparty/knowhere/CMakeLists.txt
index 6520e9cc51..ba74b606db 100644
--- a/internal/core/thirdparty/knowhere/CMakeLists.txt
+++ b/internal/core/thirdparty/knowhere/CMakeLists.txt
@@ -22,6 +22,8 @@ message(STATUS "Knowhere repo: ${GIT_REPOSITORY}")
 message(STATUS "Building knowhere-${KNOWHERE_SOURCE_VER} from source")
 message(STATUS ${CMAKE_BUILD_TYPE})
 
+set(WITH_LIGHT ON )
+
 if ( BUILD_DISK_ANN STREQUAL "ON" )
     set(WITH_DISKANN ON CACHE BOOL "" FORCE )
 else ()

diff --git a/internal/core/thirdparty/knowhere/CMakeLists.txt b/internal/core/thirdparty/knowhere/CMakeLists.txt
index 745842432..3750f8c39 100644
--- a/internal/core/thirdparty/knowhere/CMakeLists.txt
+++ b/internal/core/thirdparty/knowhere/CMakeLists.txt
@@ -43,12 +43,35 @@ FetchContent_Declare(
         GIT_TAG         ${KNOWHERE_VERSION}
         SOURCE_DIR      ${CMAKE_CURRENT_BINARY_DIR}/knowhere-src
         BINARY_DIR      ${CMAKE_CURRENT_BINARY_DIR}/knowhere-build
-        DOWNLOAD_DIR    ${THIRDPARTY_DOWNLOAD_PATH} )
+        DOWNLOAD_DIR    ${THIRDPARTY_DOWNLOAD_PATH}
+      )
 
 FetchContent_GetProperties( knowhere )
 if ( NOT knowhere_POPULATED )
     FetchContent_Populate( knowhere )
 
+    execute_process(COMMAND git diff --quiet
+      WORKING_DIRECTORY  ${CMAKE_CURRENT_BINARY_DIR}/knowhere-src
+      RESULT_VARIABLE KNOWHERE_CHECK_RESULT
+    )
+
+    if(${KNOWHERE_CHECK_RESULT} EQUAL 0)
+      if(CMAKE_SYSTEM_NAME STREQUAL "Android" AND CMAKE_SYSTEM_PROCESSOR STREQUAL
+          "aarch64")
+        message("Apply knowhere android patch...")
+        execute_process(COMMAND git apply ${CMAKE_SOURCE_DIR}/thirdparty/knowhere-android.patch
+          WORKING_DIRECTORY  ${CMAKE_CURRENT_BINARY_DIR}/knowhere-src
+          OUTPUT_VARIABLE result
+        )
+      else()
+        message("Apply knowhere patch...")
+        execute_process(COMMAND git apply ${CMAKE_SOURCE_DIR}/thirdparty/knowhere.patch
+          WORKING_DIRECTORY  ${CMAKE_CURRENT_BINARY_DIR}/knowhere-src
+          OUTPUT_VARIABLE result
+        )
+      endif()
+    endif()
+
     # Adding the following target:
     # knowhere
     add_subdirectory( ${knowhere_SOURCE_DIR}
